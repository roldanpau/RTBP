// ===============================================
// Continuation of the periodic orbit wrt energy H
// ===============================================
// FILE:          $RCSfile: porbits.c_perihelion,v $
// AUTHOR:        $Author: roldan $
//                All code is my own except where credited to others.
// DATE:          $Date: 2012-11-26 10:30:51 $
//
// PURPOSE:
// Consider the family of p:q almost-resonant periodic orbits in the RTBP.
// Compute the periodic orbit for a given (wide) range of energies when we
// change the energy H.
//
// NOTES:
//
// OVERALL METHOD:
//
// 1. Input parameters (mass parameter, Poincare section, p/q resonance, number of cuts, 
//    energy range, energy increment) from stdin.
// 2. For each energy level H in the range, do
//    2.1. Compute initial condition x_0 corresponding to p:q res. p.o. in
//         2BP.
//    2.2. Compute the fixed point x corresponding to almost-res. p.o. in
//         RTBP.
//    2.3. Compute the period T of the p.o.
//    2.4. Transform periodic point p=x to Delaunay variables.
//    2.5. Output one line to stdout:
//            H, T(H), x(H), p(H)

#include <stdio.h>
#include <stdlib.h>	// EXIT_SUCCESS, EXIT_FAILURE

#include <gsl/gsl_errno.h>      // gsl_set_error_handler_off
#include <rtbp.h> 		// DIM
#include <initcond.h>
#include <prtbp_2d.h>
#include "portbpsym.h"

int main( )
{
   double mu, H, H_lo, H_hi, H_delta, x, py;

   section_t sec;	// Poincare section

   double resonance; 	// resonance=p/q (this will be 7/1 or 1/3)
   int k;		// number of cuts with section (will be 3 or 1)
   int status;

   double z[2]; 	// periodic point, cartesian coordinates: z=(x,px)
   double p[DIM]; 	// periodic point, Delaunay coordinates: p=(l,L,g,G)
   double T2;		// half period of periodic orbit

   // auxiliary variables
   char section_str[10];        // holds input string "SEC1", "SEC2" etc

   // Input mass parameter, Poincare section, p/q resonance, number of cuts, energy range,
   // energy increment from stdin.
   if(scanf("%le %s %le %d %le %le %le", &mu, section_str, &resonance, &k, &H_lo, &H_hi,
	    &H_delta) < 7)
   {
      perror("main: error reading input");
      exit(EXIT_FAILURE);
   }

   if (strcmp(section_str,"SEC1") == 0)
      sec = SEC1;
   else if (strcmp(section_str,"SEC2") == 0)
      sec = SEC2;
   else
   {
      perror("main: error reading section string");
      exit(EXIT_FAILURE);
   }

   // Stop GSL default error handler from aborting the program
   gsl_set_error_handler_off();

   for(H=H_lo; H<=H_hi; H+=H_delta)
   {

      // Compute initial condition x_0 corresponding to p:q res. p.o. in 2BP.
      status = initcond(H, resonance, &x, &py);

      // Compute the fixed point x corresponding to almost-res. p.o. in RTBP.

      // Refine trajectory of the RTBP which is close to a periodic orbit,
      // until a true periodic orbit is obtained.
      status = portbpsym(mu,sec,H,k,&x);
      if(status)
      {
	 fprintf(stderr, \
	       "main: unable to find periodic orbit up to desired accuracy\n");
	 // this is not really an error
	 // exit(EXIT_FAILURE);
      }

      // Compute the period T of the p.o.
      z[0] = x;
      z[1] = 0;	//px
      if(prtbp_2d(mu,sec,H,k,z,&T2))
      {
	 fprintf(stderr, "main: error computing period\n");
	 exit(EXIT_FAILURE);
      }

      // Transform periodic point z to Delaunay variables p.
      /*
      z[0] = x;
      z[1] = 0;	//px

      if(cardel_2d(mu,H,z,py,p))
      {
	 fprintf(stderr, "main: error obtaining Delaunay coordinates\n");
	 exit(EXIT_FAILURE);
      }
      */

      // Output one line to stdout: H, T(H), x(H), p(H)
      // For the moment, we don't output p(H)...
      if(printf("%e %.15e %.15e %.15e %.15e %.15e %.15e\n", H, 2*T2, x,
	       p[0], p[1], p[2], p[3])<0)
      {
	 perror("main: error writting output");
	 exit(EXIT_FAILURE);
      }
   }
   exit(EXIT_SUCCESS);
}
