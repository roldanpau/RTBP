# A program in bc to derive the initial condition corresponding to r=p/q
# ressonant periodic orbit in the 2BP.
# We impose that the inicial condition is at the perihelion.

# Execute with:
#	bc -l initcond.bc

#h=-1.6	# Hamiltonian energy value
#print "Using energy level H="; h

# Hamiltonian energy value
print "Energy level H? "; h=read()

# r=p/q resonance, where p=freq. of asteroid, q=freq. of Jupiter
print "Resonance (p/q, p=frequency of Asteroid, q=frequency of Jupiter)? "; r=read()

# A function to return the integer part of a number
define int(number) {
   auto oldscale
   oldscale = scale
   scale = 0
   number /= 1 /* round number down */
   scale = oldscale
   return number
}

# Use the fact that number^exponent == e^(exponent*log(number))
define power(number,exponent) {
   if (exponent == int(exponent)) {
      return number ^ exponent 
   } else {
      return e( exponent * l(number) )
   }
}

lstar=power(r,-1/3)
gstar=-h-1/(2*lstar*lstar)
estar=sqrt(1-power(gstar/lstar,2))
# Suppose i.c. at perihelion: pos=(x,0), vel=(0,v_y)
x=gstar*gstar/(1+estar)
vy=(1+estar)/gstar

"G = "; gstar
"e = "; estar

"Initial condition at perihelion (in euclidean coords):";
print "\n"
"x = "; x
"v_y = "; vy
quit
